# Generated by Django 3.2.16 on 2023-03-07 14:58

from django.db import migrations, models, connection
import django.db.models.deletion

# common model operation
create_model_operation = migrations.CreateModel(
    name='LayerRNDT',
    fields=[
        ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
        ('constraints_other', models.TextField(default=None, null=True)),
        ('resolution', models.FloatField(default=None, null=True)),
        ('accuracy', models.FloatField(default=None, null=True)),
        ('layer', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='layers.dataset')),
    ],
    options={
        'verbose_name_plural': 'Layer RNDT',
        'ordering': ('layer', 'constraints_other'),
    },
)

# We're going to deal with both
# - MIGRATION from 3.3
#   - we already have the table in the DB,
#   - we modified the previous migration in order to have noop operations for each RNDT migration, so we'll have to deal
#     with the model stuff here
#   - the db change is only related to a FK table (was layers_layer, become layers_dataset), but this change in db
#     is automatically performed by the DBMS once the table is renamed (migration '0038_rename_layer_dataset').
# - CREATION in 4.x
#   - we are going to deal with both db and django state here

if 'rndt_layerrndt' not in connection.introspection.table_names():
    # we don't have the table in the DB: let's have a complete (state+db) Model
    ops = [create_model_operation, ]
else:
    # we do have the table in the DB, so we need to synch the Model state only
    ops = [
        migrations.SeparateDatabaseAndState(
            state_operations=[create_model_operation, ],
            database_operations=[]
        )
    ]


class Migration(migrations.Migration):
    dependencies = [
        ('layers', '0038_rename_layer_dataset'),
        ('rndt', '0005_layerrndt_accuracy'),
    ]

    operations = ops
